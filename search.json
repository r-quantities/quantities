[{"path":"/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A Guide to Working with Quantities","text":"document intends guide work quantities data (magnitudes units /uncertainty) two distinct workflows: R base -called tidyverse. Units errors (, extension, quantities) objects essentially numeric vectors, arrays matrices associated metadata. metadata always compatible functions, thus explore common operations data wrangling (subsetting, ordering, transformations, aggregations…) identify potential issues propose possible workarounds. Let us consider traditional iris data set exercise. According documentation, iris data frame 150 cases (rows) 5 variables (columns) named Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species. values provided centimeters. consider, instance, 2% uncertainty, first step define proper quantities. work resulting data frame rest article. Note , throughout document, unless otherwise stated, talk quantities objects shortcut quantities, units errors objects.","code":"library(quantities) #> Loading required package: units #> udunits database from /usr/local/share/udunits/udunits2.xml #> Loading required package: errors  iris.q <- iris for (i in 1:4)   quantities(iris.q[,i]) <- list(\"cm\", iris.q[,i] * 0.02) head(iris.q) #>   Sepal.Length  Sepal.Width Petal.Length   Petal.Width Species #> 1  5.1(1) [cm] 3.50(7) [cm] 1.40(3) [cm] 0.200(4) [cm]  setosa #> 2  4.9(1) [cm] 3.00(6) [cm] 1.40(3) [cm] 0.200(4) [cm]  setosa #> 3 4.70(9) [cm] 3.20(6) [cm] 1.30(3) [cm] 0.200(4) [cm]  setosa #> 4 4.60(9) [cm] 3.10(6) [cm] 1.50(3) [cm] 0.200(4) [cm]  setosa #> 5  5.0(1) [cm] 3.60(7) [cm] 1.40(3) [cm] 0.200(4) [cm]  setosa #> 6  5.4(1) [cm] 3.90(8) [cm] 1.70(3) [cm] 0.400(8) [cm]  setosa"},{"path":"/articles/introduction.html","id":"r-base","dir":"Articles","previous_headings":"","what":"R Base","title":"A Guide to Working with Quantities","text":"section, consider methods functions included default packages, .e., automatically installed along R distribution:","code":"rownames(installed.packages(priority=\"base\")) #>  [1] \"base\"      \"compiler\"  \"datasets\"  \"graphics\"  \"grDevices\" \"grid\"      #>  [7] \"methods\"   \"parallel\"  \"splines\"   \"stats\"     \"stats4\"    \"tcltk\"     #> [13] \"tools\"     \"utils\""},{"path":"/articles/introduction.html","id":"row-subsetting","dir":"Articles","previous_headings":"R Base","what":"Row Subsetting","title":"A Guide to Working with Quantities","text":"Quantities objects subsetting methods defined ([, [[, [<-, [[<-). Therefore can used way plain numeric vectors, conjunction functions perform subsetting. subset function handy achieves result: Note another quantities object defined comparison. needed different units incomparable. Also note first line throws warning telling us uncertainty dropped operation. kind warning thrown , subset succeeds silently.","code":"iris.q[which(iris.q$Sepal.Length > set_quantities(75, mm)), ] #> Warning: In '>' : boolean operators not defined for 'errors' objects, #> uncertainty dropped #>     Sepal.Length  Sepal.Width Petal.Length  Petal.Width   Species #> 106  7.6(2) [cm] 3.00(6) [cm]  6.6(1) [cm] 2.10(4) [cm] virginica #> 118  7.7(2) [cm] 3.80(8) [cm]  6.7(1) [cm] 2.20(4) [cm] virginica #> 119  7.7(2) [cm] 2.60(5) [cm]  6.9(1) [cm] 2.30(5) [cm] virginica #> 123  7.7(2) [cm] 2.80(6) [cm]  6.7(1) [cm] 2.00(4) [cm] virginica #> 132  7.9(2) [cm] 3.80(8) [cm]  6.4(1) [cm] 2.00(4) [cm] virginica #> 136  7.7(2) [cm] 3.00(6) [cm]  6.1(1) [cm] 2.30(5) [cm] virginica subset(iris.q, Sepal.Length > set_quantities(75, mm)) #>     Sepal.Length  Sepal.Width Petal.Length  Petal.Width   Species #> 106  7.6(2) [cm] 3.00(6) [cm]  6.6(1) [cm] 2.10(4) [cm] virginica #> 118  7.7(2) [cm] 3.80(8) [cm]  6.7(1) [cm] 2.20(4) [cm] virginica #> 119  7.7(2) [cm] 2.60(5) [cm]  6.9(1) [cm] 2.30(5) [cm] virginica #> 123  7.7(2) [cm] 2.80(6) [cm]  6.7(1) [cm] 2.00(4) [cm] virginica #> 132  7.9(2) [cm] 3.80(8) [cm]  6.4(1) [cm] 2.00(4) [cm] virginica #> 136  7.7(2) [cm] 3.00(6) [cm]  6.1(1) [cm] 2.30(5) [cm] virginica"},{"path":"/articles/introduction.html","id":"row-ordering","dir":"Articles","previous_headings":"R Base","what":"Row Ordering","title":"A Guide to Working with Quantities","text":"sort function, name suggests, sorts vectors, compatible quantities: generally, order function can used data frame ordering:","code":"iris.q$Sepal.Length[1:5] #> Units: [cm] #> Errors: 0.102 0.098 0.094 0.092 0.100 #> [1] 5.1 4.9 4.7 4.6 5.0 sort(iris.q$Sepal.Length[1:5]) #> Units: [cm] #> Errors: 0.092 0.094 0.098 0.100 0.102 #> [1] 4.6 4.7 4.9 5.0 5.1 head(iris.q[order(iris.q$Sepal.Length), ]) #>    Sepal.Length  Sepal.Width Petal.Length   Petal.Width Species #> 14 4.30(9) [cm] 3.00(6) [cm] 1.10(2) [cm] 0.100(2) [cm]  setosa #> 9  4.40(9) [cm] 2.90(6) [cm] 1.40(3) [cm] 0.200(4) [cm]  setosa #> 39 4.40(9) [cm] 3.00(6) [cm] 1.30(3) [cm] 0.200(4) [cm]  setosa #> 43 4.40(9) [cm] 3.20(6) [cm] 1.30(3) [cm] 0.200(4) [cm]  setosa #> 42 4.50(9) [cm] 2.30(5) [cm] 1.30(3) [cm] 0.300(6) [cm]  setosa #> 4  4.60(9) [cm] 3.10(6) [cm] 1.50(3) [cm] 0.200(4) [cm]  setosa"},{"path":"/articles/introduction.html","id":"column-transformation","dir":"Articles","previous_headings":"R Base","what":"Column Transformation","title":"A Guide to Working with Quantities","text":"transform function able modify variables data frame create new ones. within function provides similar flexible approach though. fully compatible quantities:","code":"head(within(iris.q, {   Sepal.Area <- Sepal.Length * Sepal.Width   Petal.Area <- Petal.Length * Petal.Width   rm(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width) })) #>   Species      Petal.Area     Sepal.Area #> 1  setosa 0.280(8) [cm^2] 17.8(5) [cm^2] #> 2  setosa 0.280(8) [cm^2] 14.7(4) [cm^2] #> 3  setosa 0.260(7) [cm^2] 15.0(4) [cm^2] #> 4  setosa 0.300(8) [cm^2] 14.3(4) [cm^2] #> 5  setosa 0.280(8) [cm^2] 18.0(5) [cm^2] #> 6  setosa  0.68(2) [cm^2] 21.1(6) [cm^2]"},{"path":"/articles/introduction.html","id":"row-aggregation","dir":"Articles","previous_headings":"R Base","what":"Row Aggregation","title":"A Guide to Working with Quantities","text":"Row aggregation process summarising data based grouping variable(s). several ways working data split factors R base, , although tend preserve classes, generally kind metadata (.e., attributes) default. following example, average Sepal.Length computed per Species, metadata gets dropped: Many functions include simplify parameter , set FALSE, preserves quantities metadata: drawback result list, list must unlisted care, otherwise, metadata gets dropped : function object-oriented wrapper tapply applied data frames also provides simplify parameter. convenient way working summary statistics aggregate generic, stats namespace. Although aggregate.data.frame method, intuitive interface aggregate.formula method. , necessary set simplify=FALSE keep quantities: Apparently, output metadata associated, really happens resulting columns lists: Therefore, tapply/case, must unlisted care still preserve metadata: method works tapply/case :","code":"tapply(iris.q$Sepal.Length, iris.q$Species, mean) #>     setosa versicolor  virginica  #>      5.006      5.936      6.588 (sepal.length.agg <-     tapply(iris.q$Sepal.Length, iris.q$Species, mean, simplify=FALSE)) #> $setosa #> 5.0(1) [cm] #>  #> $versicolor #> 5.9(1) [cm] #>  #> $virginica #> 6.6(1) [cm] # drops quantities unlist(sepal.length.agg) #>     setosa versicolor  virginica  #>      5.006      5.936      6.588  # preserves quantities do.call(c, sepal.length.agg) #> Units: [cm] #> Errors: 0.10012 0.11872 0.13176 #>     setosa versicolor  virginica  #>      5.006      5.936      6.588 (iris.q.agg <- aggregate(. ~ Species, data = iris.q, mean, simplify=FALSE)) #>      Species Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1     setosa        5.006       3.428        1.462       0.246 #> 2 versicolor        5.936        2.77         4.26       1.326 #> 3  virginica        6.588       2.974        5.552       2.026 class(iris.q.agg$Sepal.Length) #> [1] \"list\" unlist_quantities <- function(x) {   stopifnot(is.list(x) || is.data.frame(x))      unlist <- function(x) {     if (any(class(x[[1]]) %in% c(\"quantities\", \"units\", \"errors\")))       do.call(c, x)     else x   }      if (is.data.frame(x))     as.data.frame(lapply(x, unlist), col.names=colnames(x))   else unlist(x) }  unlist_quantities(iris.q.agg) #>      Species Sepal.Length  Sepal.Width Petal.Length  Petal.Width #> 1     setosa  5.0(1) [cm] 3.43(7) [cm] 1.46(3) [cm] 0.25(1) [cm] #> 2 versicolor  5.9(1) [cm] 2.77(6) [cm] 4.26(9) [cm] 1.33(3) [cm] #> 3  virginica  6.6(1) [cm] 2.97(6) [cm]  5.6(1) [cm] 2.03(4) [cm] unlist_quantities(sepal.length.agg) #> Units: [cm] #> Errors: 0.10012 0.11872 0.13176 #>     setosa versicolor  virginica  #>      5.006      5.936      6.588"},{"path":"/articles/introduction.html","id":"column-joining","dir":"Articles","previous_headings":"R Base","what":"Column Joining","title":"A Guide to Working with Quantities","text":"Joining data frames common columns can done merge generic. operations based appending columns, may subset replicated fit length merged observations. Therefore, quantities preserved cases. following example, generate data frame height per species merge main data set:","code":"height <- data.frame(   Height = set_quantities(c(55, 60, 45), cm, c(45, 30, 35)),   Species = c(\"setosa\", \"virginica\", \"versicolor\") )  head(merge(iris.q, height)) #>   Species Sepal.Length  Sepal.Width Petal.Length   Petal.Width      Height #> 1  setosa  5.1(1) [cm] 3.50(7) [cm] 1.40(3) [cm] 0.200(4) [cm] 60(40) [cm] #> 2  setosa  4.9(1) [cm] 3.00(6) [cm] 1.40(3) [cm] 0.200(4) [cm] 60(40) [cm] #> 3  setosa 4.70(9) [cm] 3.20(6) [cm] 1.30(3) [cm] 0.200(4) [cm] 60(40) [cm] #> 4  setosa 4.60(9) [cm] 3.10(6) [cm] 1.50(3) [cm] 0.200(4) [cm] 60(40) [cm] #> 5  setosa  5.0(1) [cm] 3.60(7) [cm] 1.40(3) [cm] 0.200(4) [cm] 60(40) [cm] #> 6  setosa  5.4(1) [cm] 3.90(8) [cm] 1.70(3) [cm] 0.400(8) [cm] 60(40) [cm]"},{"path":"/articles/introduction.html","id":"unpivoting","dir":"Articles","previous_headings":"R Base","what":"(Un)Pivoting","title":"A Guide to Working with Quantities","text":"reshape function, stats namespace, provides interface pivoting unpivoting (.e., tidyfying data). case iris data set, say wide format, row one observation. function quite peculiar nomenclature. First , unpivoting operation accessed providing argument direction=\"long\". need define varying columns (columns unpivot), character indices, unpivoted based names. default, separator sep=\".\" used, means Sepal.Width broken Sepal Width, former unpivoted latter grouping variable. can specify name grouping variable timevar argument. Putting everything together, unpivot data set dimension (call dim) petal/sepal: can noted unpivoting also generates index indentify multiple records group. changed name identifier dim.id (just id default). can unpivot sepal petal part flower. First, need prepend common identifier columns 3 4, unpivoted: final result one tidy observation per row. pivoting operation can accessed providing argument direction=\"wide\". process almost symmetrical, need specify v.names, character, instead varying columns. First, can pivot flower part: , remove \"value.\" column names pivot dimension (note indices removed match initial data frame): seen quantities correctly preserved whole process. Finally, can check whether data frames identical. Given order columns changed, can simply check column name column name put everything together:","code":"long.1 <- reshape(iris.q, varying=1:4, timevar=\"dim\", idvar=\"dim.id\", direction=\"long\") head(long.1) #>          Species    dim        Sepal        Petal dim.id #> 1.Length  setosa Length  5.1(1) [cm] 1.40(3) [cm]      1 #> 2.Length  setosa Length  4.9(1) [cm] 1.40(3) [cm]      2 #> 3.Length  setosa Length 4.70(9) [cm] 1.30(3) [cm]      3 #> 4.Length  setosa Length 4.60(9) [cm] 1.50(3) [cm]      4 #> 5.Length  setosa Length  5.0(1) [cm] 1.40(3) [cm]      5 #> 6.Length  setosa Length  5.4(1) [cm] 1.70(3) [cm]      6 names(long.1)[3:4] <- paste0(\"value.\", names(long.1)[3:4]) long.2 <- reshape(long.1, varying=3:4, timevar=\"part\", idvar=\"part.id\", direction=\"long\") head(long.2) #>         Species    dim dim.id  part        value part.id #> 1.Sepal  setosa Length      1 Sepal  5.1(1) [cm]       1 #> 2.Sepal  setosa Length      2 Sepal  4.9(1) [cm]       2 #> 3.Sepal  setosa Length      3 Sepal 4.70(9) [cm]       3 #> 4.Sepal  setosa Length      4 Sepal 4.60(9) [cm]       4 #> 5.Sepal  setosa Length      5 Sepal  5.0(1) [cm]       5 #> 6.Sepal  setosa Length      6 Sepal  5.4(1) [cm]       6 wide.1 <- reshape(long.2, v.names=\"value\", timevar=\"part\", idvar=\"part.id\", direction=\"wide\") head(wide.1) #>         Species    dim dim.id part.id  value.Sepal  value.Petal #> 1.Sepal  setosa Length      1       1  5.1(1) [cm] 1.40(3) [cm] #> 2.Sepal  setosa Length      2       2  4.9(1) [cm] 1.40(3) [cm] #> 3.Sepal  setosa Length      3       3 4.70(9) [cm] 1.30(3) [cm] #> 4.Sepal  setosa Length      4       4 4.60(9) [cm] 1.50(3) [cm] #> 5.Sepal  setosa Length      5       5  5.0(1) [cm] 1.40(3) [cm] #> 6.Sepal  setosa Length      6       6  5.4(1) [cm] 1.70(3) [cm] names(wide.1)[5:6] <- sub(\"value\\\\.\", \"\", names(wide.1)[5:6]) wide.2 <- reshape(wide.1, v.names=c(\"Sepal\", \"Petal\"), timevar=\"dim\", idvar=\"dim.id\", direction=\"wide\") #> Warning in reshapeWide(data, idvar = idvar, timevar = timevar, varying = #> varying, : some constant variables (part.id) are really varying wide.2$dim.id <- NULL wide.2$part.id <- NULL head(wide.2) #>         Species Sepal.Length Petal.Length  Sepal.Width   Petal.Width #> 1.Sepal  setosa  5.1(1) [cm] 1.40(3) [cm] 3.50(7) [cm] 0.200(4) [cm] #> 2.Sepal  setosa  4.9(1) [cm] 1.40(3) [cm] 3.00(6) [cm] 0.200(4) [cm] #> 3.Sepal  setosa 4.70(9) [cm] 1.30(3) [cm] 3.20(6) [cm] 0.200(4) [cm] #> 4.Sepal  setosa 4.60(9) [cm] 1.50(3) [cm] 3.10(6) [cm] 0.200(4) [cm] #> 5.Sepal  setosa  5.0(1) [cm] 1.40(3) [cm] 3.60(7) [cm] 0.200(4) [cm] #> 6.Sepal  setosa  5.4(1) [cm] 1.70(3) [cm] 3.90(8) [cm] 0.400(8) [cm] all(sapply(colnames(iris.q), function(col) all(iris.q[[col]] == wide.2[[col]]))) #> [1] TRUE"},{"path":"/articles/introduction.html","id":"plotting","dir":"Articles","previous_headings":"R Base","what":"Plotting","title":"A Guide to Working with Quantities","text":"Quantities support R base scatterplots box: errors displayed segments around point units automatically added corresponding axis label. example simple plot single quantity, value automatically indexed x-axis:  X-Y scatterplots support units errors axes: equivalent, produce result, formula method:  fundamental limitation R base mixed quantities non-quantities data due S3 dispatch. possible, instance, plot quantities x-axis numeric data y-axis:  However, x-axis numeric data, quantities methods dispatched y-axis:  One way overcome limitation set unitless errorless quantities x-axis:","code":"# vector plots with(iris.q, plot(Sepal.Width, col=Species)) # x-y plots with(iris.q, plot(Sepal.Length, Sepal.Width, col=Species)) # dataframe plots plot(iris.q[, c(\"Sepal.Length\", \"Sepal.Width\")], col=iris.q$Species) plot(Sepal.Width ~ Sepal.Length, iris.q, col=Species) plot(as.numeric(Sepal.Width) ~ Sepal.Length, iris.q, col=Species) plot(Sepal.Width ~ as.numeric(Sepal.Length), iris.q, col=Species) plot(Sepal.Width ~ set_quantities(as.numeric(Sepal.Length), 1, 0), iris.q, col=Species)"},{"path":"/articles/introduction.html","id":"tidyverse","dir":"Articles","previous_headings":"","what":"Tidyverse","title":"A Guide to Working with Quantities","text":"core tidyverse includes following packages: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr forcats. section covers use cases dplyr (everything except pivoting unpivoting), tidyr (pivoting unpivoting) ggplot2 (plotting). Although strictly necessary, convert data frame tibble format enjoy formatting provided pillar. Since dplyr 1.0.0, see, enhanced support custom S3 classes thanks new implementation based vctrs >= 0.3.0. Packages units >= 0.6-7, errors >= 0.3.4 quantities >= 0.1.5 add support approach.","code":"library(dplyr); packageVersion(\"dplyr\") #> [1] '1.0.10' library(tidyr); packageVersion(\"tidyr\") #> [1] '1.2.1' iris.q <- as_tibble(iris.q) head(iris.q) #> # A tibble: 6 × 5 #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>     (err) [cm]  (err) [cm]   (err) [cm]  (err) [cm] <fct>   #> 1       5.1(1)     3.50(7)      1.40(3)    0.200(4) setosa  #> 2       4.9(1)     3.00(6)      1.40(3)    0.200(4) setosa  #> 3      4.70(9)     3.20(6)      1.30(3)    0.200(4) setosa  #> 4      4.60(9)     3.10(6)      1.50(3)    0.200(4) setosa  #> 5       5.0(1)     3.60(7)      1.40(3)    0.200(4) setosa  #> 6       5.4(1)     3.90(8)      1.70(3)    0.400(8) setosa"},{"path":"/articles/introduction.html","id":"row-subsetting-1","dir":"Articles","previous_headings":"Tidyverse","what":"Row Subsetting","title":"A Guide to Working with Quantities","text":"filter generic finds observations conditions hold. main difference base subsetting , condition evaluates NA certain row, dropped. base case, another quantities object must defined comparison: also three scoped variants available (filter_all, filter_if, filter_at) subsetting function row number called slice. preserve quantities.","code":"iris.q %>%   filter(Sepal.Length > set_quantities(75, mm)) %>%   head() #> # A tibble: 6 × 5 #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   #>     (err) [cm]  (err) [cm]   (err) [cm]  (err) [cm] <fct>     #> 1       7.6(2)     3.00(6)       6.6(1)     2.10(4) virginica #> 2       7.7(2)     3.80(8)       6.7(1)     2.20(4) virginica #> 3       7.7(2)     2.60(5)       6.9(1)     2.30(5) virginica #> 4       7.7(2)     2.80(6)       6.7(1)     2.00(4) virginica #> 5       7.9(2)     3.80(8)       6.4(1)     2.00(4) virginica #> 6       7.7(2)     3.00(6)       6.1(1)     2.30(5) virginica"},{"path":"/articles/introduction.html","id":"row-ordering-1","dir":"Articles","previous_headings":"Tidyverse","what":"Row Ordering","title":"A Guide to Working with Quantities","text":"arrange generic sorts variables straightforward way, compatible quantities: desc function can applied individual variables arrange descending order.","code":"iris.q %>%   arrange(Sepal.Length) %>%   head() #> # A tibble: 6 × 5 #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>     (err) [cm]  (err) [cm]   (err) [cm]  (err) [cm] <fct>   #> 1      4.30(9)     3.00(6)      1.10(2)    0.100(2) setosa  #> 2      4.40(9)     2.90(6)      1.40(3)    0.200(4) setosa  #> 3      4.40(9)     3.00(6)      1.30(3)    0.200(4) setosa  #> 4      4.40(9)     3.20(6)      1.30(3)    0.200(4) setosa  #> 5      4.50(9)     2.30(5)      1.30(3)    0.300(6) setosa  #> 6      4.60(9)     3.10(6)      1.50(3)    0.200(4) setosa"},{"path":"/articles/introduction.html","id":"column-transformation-1","dir":"Articles","previous_headings":"Tidyverse","what":"Column Transformation","title":"A Guide to Working with Quantities","text":"two generics column transformations: mutate modifies adds new variables preserving existing ones, transmute drops existing variables. syntax similar base functions transform within, equally compatible quantities:","code":"iris.q %>%   transmute(     Species = Species,     Petal.Area = Petal.Length * Petal.Width,     Sepal.Area = Sepal.Length * Sepal.Width   ) %>%   head() #> # A tibble: 6 × 3 #>   Species   Petal.Area   Sepal.Area #>   <fct>   (err) [cm^2] (err) [cm^2] #> 1 setosa      0.280(8)      17.8(5) #> 2 setosa      0.280(8)      14.7(4) #> 3 setosa      0.260(7)      15.0(4) #> 4 setosa      0.300(8)      14.3(4) #> 5 setosa      0.280(8)      18.0(5) #> 6 setosa       0.68(2)      21.1(6)"},{"path":"/articles/introduction.html","id":"row-aggregation-1","dir":"Articles","previous_headings":"Tidyverse","what":"Row Aggregation","title":"A Guide to Working with Quantities","text":"dplyr breaks aggregation operations two distinct parts: grouping (group_by) summarising (using summarise others). Since dplyr >= 1.0.0, operations aggregated data now fully compatible quantities ,compared base methods, fancy unlisting required:","code":"iris.q %>%   group_by(Species) %>%   summarise_all(mean) #> # A tibble: 3 × 5 #>   Species    Sepal.Length Sepal.Width Petal.Length Petal.Width #>   <fct>        (err) [cm]  (err) [cm]   (err) [cm]  (err) [cm] #> 1 setosa           5.0(1)     3.43(7)      1.46(3)     0.25(1) #> 2 versicolor       5.9(1)     2.77(6)      4.26(9)     1.33(3) #> 3 virginica        6.6(1)     2.97(6)       5.6(1)     2.03(4)"},{"path":"/articles/introduction.html","id":"column-joining-1","dir":"Articles","previous_headings":"Tidyverse","what":"Column Joining","title":"A Guide to Working with Quantities","text":"Several verbs provided different types joins, inner_join, left_join, right_join full_join. Internally, use grouping mechanism summaries. Therefore, since dplyr >= 1.0.0, fully compatible quantities : difference base merge dplyr reorder columns respect left-hand side.","code":"iris.q %>%   left_join(data.frame(     Height = set_quantities(c(55, 60, 45), cm, c(45, 30, 35)),     Species = c(\"setosa\", \"virginica\", \"versicolor\")   )) %>%   head() #> Joining, by = \"Species\" #> # A tibble: 6 × 6 #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species     Height #>     (err) [cm]  (err) [cm]   (err) [cm]  (err) [cm] <chr>   (err) [cm] #> 1       5.1(1)     3.50(7)      1.40(3)    0.200(4) setosa      60(40) #> 2       4.9(1)     3.00(6)      1.40(3)    0.200(4) setosa      60(40) #> 3      4.70(9)     3.20(6)      1.30(3)    0.200(4) setosa      60(40) #> 4      4.60(9)     3.10(6)      1.50(3)    0.200(4) setosa      60(40) #> 5       5.0(1)     3.60(7)      1.40(3)    0.200(4) setosa      60(40) #> 6       5.4(1)     3.90(8)      1.70(3)    0.400(8) setosa      60(40)"},{"path":"/articles/introduction.html","id":"unpivoting-1","dir":"Articles","previous_headings":"Tidyverse","what":"(Un)Pivoting","title":"A Guide to Working with Quantities","text":"Finally, pivoting unpivoting handled separate package, tidyr. Historically, managed using verbs spread (pivot) gather (unpivot). verbs, compatible quantities, deprecated longer maintained. Instead, new straightforward verbs (un)pivoting data frames called pivot_wider (equivalent spread) pivot_longer (equivalent gather). verbs make use new approach brought vctrs therefore fully compatible quantities. Compared base R, unpivoting operation substantially straightforward. next example, directly merge four columns interest value column, correspoding column names gathered name column. column separated flower part (sepal, petal) dim (length, height): following example, first unpivot original data set, assign quantities try pivot obtain iris.q back, just works:","code":"iris.q %>%   pivot_longer(1:4) %>%   separate(name, c(\"part\", \"dim\")) %>%   head() #> # A tibble: 6 × 4 #>   Species part  dim         value #>   <fct>   <chr> <chr>  (err) [cm] #> 1 setosa  Sepal Length     5.1(1) #> 2 setosa  Sepal Width     3.50(7) #> 3 setosa  Petal Length    1.40(3) #> 4 setosa  Petal Width    0.200(4) #> 5 setosa  Sepal Length     4.9(1) #> 6 setosa  Sepal Width     3.00(6) iris %>%   # first gather, with row numbers as row_id   mutate(row_id = 1:n()) %>%   pivot_longer(1:4) %>%   # assign quantities   mutate(value = set_quantities(value, cm, value * 0.05)) %>%   # now spread and remove the row_id   pivot_wider() %>%   select(-row_id) %>%   head() #> # A tibble: 6 × 5 #>   Species Sepal.Length Sepal.Width Petal.Length Petal.Width #>   <fct>     (err) [cm]  (err) [cm]   (err) [cm]  (err) [cm] #> 1 setosa        5.1(3)      3.5(2)      1.40(7)     0.20(1) #> 2 setosa        4.9(2)      3.0(1)      1.40(7)     0.20(1) #> 3 setosa        4.7(2)      3.2(2)      1.30(6)     0.20(1) #> 4 setosa        4.6(2)      3.1(2)      1.50(7)     0.20(1) #> 5 setosa        5.0(2)      3.6(2)      1.40(7)     0.20(1) #> 6 setosa        5.4(3)      3.9(2)      1.70(8)     0.40(2)"},{"path":"/articles/introduction.html","id":"plotting-1","dir":"Articles","previous_headings":"Tidyverse","what":"Plotting","title":"A Guide to Working with Quantities","text":"Quantities packages provide ggplot2 elements make scatterplots straightforward: units provides automatic detection units scale type, optional conversion customization via scale_x_units() scale_y_units(). errors provides automatic placement errorbars via geom_errors(). quantities provides compatibility layer , conversions scale_[x|y]_units affect errorbars . default, units automatically placed axes:  errobars can requested via geom_errors():  Errors may dropped axis:  units can converted display:","code":"library(ggplot2); packageVersion(\"ggplot2\") #> [1] '3.4.0' p0 <- ggplot(iris.q) + aes(Sepal.Length, Sepal.Width, color=Species) +   geom_point() p0 p0 + geom_errors() #> Warning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` in the `default_aes` field and elsewhere instead. p0 + geom_errors(aes(x=drop_errors(Sepal.Length))) p0 + geom_errors() + scale_x_units(unit=\"mm\") + scale_y_units(unit=\"m\")"},{"path":"/articles/introduction.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"A Guide to Working with Quantities","text":"R base works smoothly quantities cases. shortcoming care must applied aggregations. particular, simplification must explicitly disabled (simplify=FALSE), simplification (.e., converting lists vectors quantities) must applied manually avoiding unlist. Since dplyr 1.0.0 tidyr 1.1.0 (units >= 0.6-7, errors >= 0.3.4 quantities >= 0.1.5), new vctrs-based approach brings us full compatibility quantities operations considered document, including grouped operations, joining pivoting, work previous versions. R base ggplot2 plots work box, although latter provides much flexibility can used independently tidyverse.","code":""},{"path":"/articles/introduction.html","id":"a-note-on-data-table","dir":"Articles","previous_headings":"","what":"A Note on data.table","title":"A Guide to Working with Quantities","text":"data.table package another popular data tools, provides high-performance version base R’s data.frame syntax feature enhancements ease use, convenience programming speed. Long story short, included section data.table currently (v1.11.4) work well vectorised attributes. underlying problem similar dplyr’s issue, unfortunately affects operations, including row subsetting ordering. column transformation seems work, operations generate corrupted objects. found defining quantities columns lists (element consists single value, unit uncertainty) may workaround, probably serious performance penalty package typically chosen speed reasons.","code":""},{"path":"/articles/parsing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Parsing Quantities","text":"BIPM (Bureau International des Poids et Mesures) international authority measurement units uncertainty. Joint Committee Guides Metrology (JCGM), dependent BIPM together international standardisation bodies, maintains two fundamental guides metrology: VIM (“International Vocabulary Metrology – Basic General Concepts Associated Terms”) GUM (“Evaluation Measurement Data – Guide Expression Uncertainty Measurement”). latter defines four ways reporting standard uncertainty. example, reporting nominal mass \\(m_S\\) 100 g uncertainty \\(u_c\\): \\(m_S\\) = 100.02147 g, \\(u_c\\) = 0.35 mg; , quantity uncertainty reported separatedly, thus may expressed different units. \\(m_S\\) = 100.02147(35) g, number parentheses value \\(u_c\\) referred corresponding last digits reported quantity. \\(m_S\\) = 100.02147(0.00035) g, number parentheses value \\(u_c\\) expressed unit reported quantity. \\(m_S\\) = (100.02147 \\(\\pm\\) 0.00035), number following symbol \\(\\pm\\) value \\(u_c\\) unit reported quantity. second scheme compact one, default reporting mode errors package. fourth scheme also supported given extended notation, GUM discourages use prevent confusion confidence intervals. lines, BIMP also publishes International System Units (SI), consist seven base units derived units, many special names symbols. Units reported corresponding quantity using products powers symbols (e.g., 1 N = 1 m kg s-2).","code":""},{"path":"/articles/parsing.html","id":"available-parsers","dir":"Articles","previous_headings":"","what":"Available parsers","title":"Parsing Quantities","text":"quantities package provides three methods parse units uncertainty following GUM’s recommendations: uncertainty found, zero error assumed values. units found, values supposed unitless. uncertainty found, zero error assumed values. units found, warning emitted. uncertaint found, warning emitted. units found, values supposed unitless. Given rectangular data file, CSV file, can read CSV reader (e.g., base read.csv, readr’s read_csv data.table’s fread). , proper parser can used convert columns required.","code":"(d.quantities <- d.units <- d.errors <- read.csv(textConnection(\" quantities,        units,  errors 1.02(5) g,         1.02 g, 1.02(5) 2.51(0.01) V,      2.51 V, 2.51(0.01) (3.23 +/- 0.12) m, 3.23 m, 3.23 +/- 0.12\"), stringsAsFactors=FALSE)) #>          quantities           units         errors #> 1         1.02(5) g          1.02 g        1.02(5) #> 2      2.51(0.01) V          2.51 V     2.51(0.01) #> 3 (3.23 +/- 0.12) m          3.23 m  3.23 +/- 0.12 library(quantities) #> Loading required package: units #> udunits database from /usr/local/share/udunits/udunits2.xml #> Loading required package: errors  for (name in names(d.quantities)) {   message(name)   d.quantities[[name]] <- parse_quantities(d.quantities[[name]])   d.units[[name]] <- parse_units(d.units[[name]])   d.errors[[name]] <- parse_errors(d.errors[[name]]) } #> quantities #> Warning in parse_units(d.units[[name]]): errors present but ignored #> Warning in parse_errors(d.errors[[name]]): units present but ignored #> units #> Warning in parse_errors(d.errors[[name]]): units present but ignored #> errors #> Warning in parse_units(d.units[[name]]): errors present but ignored  d.quantities #>    quantities       units      errors #> 1 1.02(5) [g] 1.02(0) [g] 1.02(5) [1] #> 2 2.51(1) [V] 2.51(0) [V] 2.51(1) [1] #> 3  3.2(1) [m] 3.23(0) [m]  3.2(1) [1] d.units #>   quantities    units   errors #> 1   1.02 [g] 1.02 [g] 1.02 [1] #> 2   2.51 [V] 2.51 [V] 2.51 [1] #> 3   3.23 [m] 3.23 [m] 3.23 [1] d.errors #>   quantities   units  errors #> 1    1.02(5) 1.02(0) 1.02(5) #> 2    2.51(1) 2.51(0) 2.51(1) #> 3     3.2(1) 3.23(0)  3.2(1)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Iñaki Ucar. Author, copyright holder, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pebesma E, Mailund T, Hiebert J (2016). “Measurement Units R.” R Journal, 8(2), 486–494. doi:10.32614/RJ-2016-061. Ucar , Pebesma E, Azcorra (2018). “Measurement Errors R.” R Journal, 10(2), 549–557. doi:10.32614/RJ-2018-075.","code":"@Article{,   title = {Measurement Units in {R}},   author = {Edzer Pebesma and Thomas Mailund and James Hiebert},   year = {2016},   journal = {R Journal},   doi = {10.32614/RJ-2016-061},   pages = {486--494},   volume = {8},   number = {2}, } @Article{,   title = {Measurement Errors in {R}},   author = {Iñaki Ucar and Edzer Pebesma and Arturo Azcorra},   year = {2018},   journal = {R Journal},   doi = {10.32614/RJ-2018-075},   pages = {549--557},   volume = {10},   number = {2}, }"},{"path":"/index.html","id":"id_-quantity-calculus-for-r","dir":"","previous_headings":"","what":"Quantity Calculus for R Vectors","title":"Quantity Calculus for R Vectors","text":"quantities package provides integration ‘units’ ‘errors’ packages complete quantity calculus system R vectors, matrices arrays, automatic propagation, conversion, derivation simplification magnitudes uncertainties.","code":""},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Quantity Calculus for R Vectors","text":"Blog posts: Quantities R – First working prototype, Mar 1, 2018. Using quantities parse data units errors, May 7, 2018. Data wrangling operations quantities, Jun 27, 2018. Quantities R – Ready CRAN release, Aug 31, 2018. Vignettes: Guide Working Quantities. Parsing Quantities. Papers: Edzer Pebesma, Thomas Mailund James Hiebert (2016). “Measurement Units R.” R Journal, 8 (2), 486–494. DOI: 10.32614/RJ-2016-061 Iñaki Ucar, Edzer Pebesma Arturo Azcorra (2018). “Measurement Errors R.” R Journal, 10 (2), 549–557. DOI: 10.32614/RJ-2018-075","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Quantity Calculus for R Vectors","text":"Install release version CRAN: installation GitHub requires remotes package.","code":"install.packages(\"quantities\") # install.packages(\"remotes\") remotes::install_github(paste(\"r-quantities\", c(\"units\", \"errors\", \"quantities\"), sep=\"/\"))"},{"path":"/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Quantity Calculus for R Vectors","text":"project gratefully acknowledges financial support ","code":""},{"path":"/reference/Extract.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or Replace Parts of an Object — Extract.quantities","title":"Extract or Replace Parts of an Object — Extract.quantities","text":"S3 operators extract replace parts quantities objects.","code":""},{"path":"/reference/Extract.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or Replace Parts of an Object — Extract.quantities","text":"","code":"# S3 method for quantities [(x, ...)  # S3 method for quantities [[(x, ...)  # S3 method for quantities [(x, ...) <- value  # S3 method for quantities [[(x, ...) <- value"},{"path":"/reference/Extract.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or Replace Parts of an Object — Extract.quantities","text":"x object extract element(s) replace element(s). ... additional arguments passed base methods (see Extract). value typically array-like R object similar class x.","code":""},{"path":"/reference/Extract.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or Replace Parts of an Object — Extract.quantities","text":"","code":"x <- set_quantities(1:3, m/s, 0.1) y <- set_quantities(4:6, m/s, 0.2) (z <- rbind(x, y)) #> Units: [m/s] #> Errors: 0.1 0.2 0.1 0.2 0.1 ... #>   [,1] [,2] [,3] #> x    1    2    3 #> y    4    5    6 z[2, 2] #> 5.0(2) [m/s] z[2, 2] <- -1 errors(z[[1, 2]]) <- 0.8 # assumes same unit errors(z[[2, 2]]) <- set_units(80, cm/s) z[, 2] #> Units: [m/s] #> Errors: 0.8 0.8 #>  x  y  #>  2 -1"},{"path":"/reference/as.data.frame.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a Data Frame — as.data.frame.quantities","title":"Coerce to a Data Frame — as.data.frame.quantities","text":"S3 method quantities objects (see .data.frame).","code":""},{"path":"/reference/as.data.frame.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a Data Frame — as.data.frame.quantities","text":"","code":"# S3 method for quantities as.data.frame(x, row.names = NULL, optional = FALSE,   ...)"},{"path":"/reference/as.data.frame.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a Data Frame — as.data.frame.quantities","text":"x R object. row.names NULL character vector giving row     names data frame.  Missing values allowed. optional logical. TRUE, setting row names     converting column names (syntactic names: see     make.names) optional.  Note R's     base package .data.frame() methods use     optional column names treatment, basically     meaning data.frame(*, check.names = !optional).     See also make.names argument matrix method. ... additional arguments passed methods.","code":""},{"path":"/reference/as.data.frame.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a Data Frame — as.data.frame.quantities","text":"","code":"x <- set_quantities(1:3, m/s, 0.1) y <- set_quantities(4:6, m/s, 0.2) (z <- cbind(x, y)) #> Units: [m/s] #> Errors: 0.1 0.1 0.1 0.2 0.2 ... #>      x y #> [1,] 1 4 #> [2,] 2 5 #> [3,] 3 6 as.data.frame(z) #>              x            y #> 1 1.0(1) [m/s] 4.0(2) [m/s] #> 2 2.0(1) [m/s] 5.0(2) [m/s] #> 3 3.0(1) [m/s] 6.0(2) [m/s]"},{"path":"/reference/as.list.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a List — as.list.quantities","title":"Coerce to a List — as.list.quantities","text":"S3 method quantities objects (see .list).","code":""},{"path":"/reference/as.list.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a List — as.list.quantities","text":"","code":"# S3 method for quantities as.list(x, ...)"},{"path":"/reference/as.list.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a List — as.list.quantities","text":"x object coerced tested. ... objects, possibly named.","code":""},{"path":"/reference/as.list.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a List — as.list.quantities","text":"","code":"x <- set_quantities(1:3, m/s, 0.1) as.list(x) #> [[1]] #> 1.0(1) [m/s] #>  #> [[2]] #> 2.0(1) [m/s] #>  #> [[3]] #> 3.0(1) [m/s] #>"},{"path":"/reference/as.matrix.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a Matrix — as.matrix.quantities","title":"Coerce to a Matrix — as.matrix.quantities","text":"S3 method quantities objects (see .matrix).","code":""},{"path":"/reference/as.matrix.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a Matrix — as.matrix.quantities","text":"","code":"# S3 method for quantities as.matrix(x, ...)"},{"path":"/reference/as.matrix.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a Matrix — as.matrix.quantities","text":"x R object. ... additional arguments passed methods.","code":""},{"path":"/reference/as.matrix.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a Matrix — as.matrix.quantities","text":"","code":"as.matrix(set_quantities(1:3, m/s, 0.1)) #> Units: [m/s] #> Errors: 0.1 0.1 0.1 #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3"},{"path":"/reference/c.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Values into a Vector or List — c.quantities","title":"Combine Values into a Vector or List — c.quantities","text":"S3 method quantities objects (see c).","code":""},{"path":"/reference/c.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Values into a Vector or List — c.quantities","text":"","code":"# S3 method for quantities c(...)"},{"path":"/reference/c.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Values into a Vector or List — c.quantities","text":"... objects concatenated.  NULL entries     dropped method dispatch unless beginning     argument list.","code":""},{"path":"/reference/c.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Values into a Vector or List — c.quantities","text":"","code":"c(set_quantities(1, m/s, 0.2), set_quantities(30, km/h, 0.1)) #> Units: [m/s] #> Errors: 0.20000000 0.02777778 #> [1] 1.000000 8.333333"},{"path":"/reference/cbind.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine R Objects by Rows or Columns — cbind.quantities","title":"Combine R Objects by Rows or Columns — cbind.quantities","text":"S3 methods quantities objects (see cbind).","code":""},{"path":"/reference/cbind.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine R Objects by Rows or Columns — cbind.quantities","text":"","code":"# S3 method for quantities cbind(..., deparse.level = 1)  # S3 method for quantities rbind(..., deparse.level = 1)"},{"path":"/reference/cbind.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine R Objects by Rows or Columns — cbind.quantities","text":"... (generalized) vectors matrices.  can given named     arguments.  R objects may coerced appropriate, S4     methods may used: see sections ‘Details’     ‘Value’.  (\"data.frame\" method cbind     can arguments data.frame     stringsAsFactors.) deparse.level integer controlling construction labels     case non-matrix-like arguments (default method):deparse.level = 0 constructs labels; default,deparse.level = 1 2 constructs labels argument     names, see ‘Value’ section .","code":""},{"path":[]},{"path":"/reference/cbind.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine R Objects by Rows or Columns — cbind.quantities","text":"","code":"x <- set_quantities(1, m/s, 0.1) y <- set_quantities(1:3, m/s, 0.2) z <- set_quantities(8:10, m/s, 0.1) (m <- cbind(x, y)) # the '1' (= shorter vector) is recycled #> Units: [m/s] #> Errors: 0.1 0.1 0.1 0.2 0.2 ... #>      x y #> [1,] 1 1 #> [2,] 1 2 #> [3,] 1 3 (m <- cbind(m, z)[, c(1, 3, 2)]) # insert a column #> Units: [m/s] #> Errors: 0.1 0.1 0.1 0.1 0.1 ... #>      x  z y #> [1,] 1  8 1 #> [2,] 1  9 2 #> [3,] 1 10 3 (m <- rbind(m, z)) # insert a row #> Units: [m/s] #> Errors: 0.1 0.1 0.1 0.1 0.1 ... #>   x  z  y #>   1  8  1 #>   1  9  2 #>   1 10  3 #> z 8  9 10"},{"path":"/reference/correl.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Correlations Between quantities Objects — correl","title":"Handle Correlations Between quantities Objects — correl","text":"Methods set retrieve correlations covariances quantities objects.","code":""},{"path":"/reference/correl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Correlations Between quantities Objects — correl","text":"","code":"# S3 method for quantities correl(x, y) <- value  # S3 method for quantities covar(x, y) <- value"},{"path":"/reference/correl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Correlations Between quantities Objects — correl","text":"x object class quantities. y object class quantities length x. value compatible object class units length 1 length x. correlations, means unitless vector (numeric vector also accepted case). covariances, means magnitude x*y.","code":""},{"path":[]},{"path":"/reference/correl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle Correlations Between quantities Objects — correl","text":"","code":"x <- set_quantities(1:10, m/s, 0.1) y <- set_quantities(10:1, km/h, 0.2) correl(x, y) <- 0.1 # accepted correl(x, y) <- set_units(0.1) # recommended correl(x, y) #> Units: [1] #>  [1] 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 covar(x, y) #> Units: [km*m/h/s] #>  [1] 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002 0.002"},{"path":"/reference/diff.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Lagged Differences — diff.quantities","title":"Lagged Differences — diff.quantities","text":"S3 method quantities objects (see diff).","code":""},{"path":"/reference/diff.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lagged Differences — diff.quantities","text":"","code":"# S3 method for quantities diff(x, lag = 1L, differences = 1L, ...)"},{"path":"/reference/diff.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lagged Differences — diff.quantities","text":"x numeric vector matrix containing values     differenced. lag integer indicating lag use. differences integer indicating order difference. ... arguments passed methods.","code":""},{"path":"/reference/diff.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lagged Differences — diff.quantities","text":"","code":"diff(set_quantities(1:10, m/s, 0.1), 2) #> Units: [m/s] #> Errors: 0.1414214 0.1414214 0.1414214 0.1414214 0.1414214 ... #> [1] 2 2 2 2 2 2 2 2 diff(set_quantities(1:10, m/s, 0.1), 2, 2) #> Units: [m/s] #> Errors: 0.2 0.2 0.2 0.2 0.2 ... #> [1] 0 0 0 0 0 0 x <- cumsum(cumsum(set_quantities(1:10, m/s, 0.1))) diff(x, lag = 2) #> Units: [m/s] #> Errors: 0.2645751 0.3605551 0.4582576 0.5567764 0.6557439 ... #> [1]   9  16  25  36  49  64  81 100 diff(x, differences = 2) #> Units: [m/s] #> Errors: 0.3605551 0.5000000 0.6403124 0.7810250 0.9219544 ... #> [1]  3  4  5  6  7  8  9 10"},{"path":"/reference/drop_quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Units and Errors — drop_quantities","title":"Drop Units and Errors — drop_quantities","text":"Drop Units Errors","code":""},{"path":"/reference/drop_quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Units and Errors — drop_quantities","text":"","code":"drop_quantities(x)  # S3 method for quantities drop_units(x)  # S3 method for quantities drop_errors(x)  # S3 method for data.frame drop_quantities(x)"},{"path":"/reference/drop_quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Units and Errors — drop_quantities","text":"x quantities object.","code":""},{"path":"/reference/drop_quantities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop Units and Errors — drop_quantities","text":"numeric without units errors attributes, preserving attributes like dimensions classes.","code":""},{"path":"/reference/drop_quantities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop Units and Errors — drop_quantities","text":"drop_quantities equivalent quantities(x) <- NULL set_quantities(x, NULL, NULL). drop_units equivalent units(x) <- NULL set_units(x, NULL). drop_errors equivalent errors(x) <- NULL set_errors(x, NULL).","code":""},{"path":"/reference/errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Measurement Uncertainty on a Numeric Vector — errors","title":"Handle Measurement Uncertainty on a Numeric Vector — errors","text":"Set retrieve measurement uncertainty /numeric vectors (extensions errors package quantities units objects).","code":""},{"path":"/reference/errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Measurement Uncertainty on a Numeric Vector — errors","text":"","code":"# S3 method for units errors(x)  # S3 method for mixed_units errors(x)  # S3 method for units errors(x) <- value  # S3 method for mixed_units errors(x) <- value  # S3 method for units set_errors(x, value = 0)  # S3 method for mixed_units set_errors(x, value = 0)  # S3 method for units errors_max(x)  # S3 method for units errors_min(x)"},{"path":"/reference/errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Measurement Uncertainty on a Numeric Vector — errors","text":"x numeric object, object class quantities, units errors. value numeric vector units object length 1, length x (see details).","code":""},{"path":"/reference/errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle Measurement Uncertainty on a Numeric Vector — errors","text":"objects class quantities units, errors() method returns units object matches units x. Methods `errors<-`() set_errors() assume provided uncertainty (value) units x. However, best practice provide value explicit units. way, uncertainty can provided different (compatible) units, automatically converted units x (see examples ).","code":""},{"path":[]},{"path":"/reference/errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle Measurement Uncertainty on a Numeric Vector — errors","text":"","code":"x <- set_units(1:5, m) errors(x) <- 0.01 # implicit units, same as x errors(x) #> Units: [m] #> [1] 0.01 0.01 0.01 0.01 0.01 errors(x) <- set_units(1, cm) # explicit units errors(x) #> Units: [m] #> [1] 0.01 0.01 0.01 0.01 0.01"},{"path":"/reference/groupGeneric.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 Group Generic Functions — groupGeneric.quantities","title":"S3 Group Generic Functions — groupGeneric.quantities","text":"Math, Ops Summary group generic methods quantities objects (see groupGeneric comprehensive list available methods).","code":""},{"path":"/reference/groupGeneric.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 Group Generic Functions — groupGeneric.quantities","text":"","code":"# S3 method for quantities Math(x, ...)  # S3 method for quantities Ops(e1, e2)  # S3 method for quantities Summary(..., na.rm = FALSE)"},{"path":"/reference/groupGeneric.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 Group Generic Functions — groupGeneric.quantities","text":"x, e1, e2 objects. ... arguments passed methods. na.rm logical: missing values removed?","code":""},{"path":"/reference/groupGeneric.quantities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 Group Generic Functions — groupGeneric.quantities","text":"See groupGeneric.errors, Ops.units, Math.units, details.","code":""},{"path":"/reference/groupGeneric.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 Group Generic Functions — groupGeneric.quantities","text":"","code":"x <- set_quantities(1:3, m/s, 0.1) log(x) #> Units: [(ln(re 1 m.s-1))] #> Errors: 0.10000000 0.05000000 0.03333333 #> [1] 0.0000000 0.6931472 1.0986123 cumsum(x) #> Units: [m/s] #> Errors: 0.1000000 0.1414214 0.1732051 #> [1] 1 3 6 cumprod(x) #> Warning: Operation cumprod not meaningful for units #> Errors: 0.1000000 0.2236068 0.7000000 #> [1] 1 2 6  a <- set_quantities(1:3, m/s, 0.1) b <- set_quantities(1:3, m/s, 0.1) a + b #> Units: [m/s] #> Errors: 0.1414214 0.1414214 0.1414214 #> [1] 2 4 6 a * b #> Units: [m^2/s^2] #> Errors: 0.1414214 0.2828427 0.4242641 #> [1] 1 4 9 a / b #> Units: [1] #> Errors: 0.14142136 0.07071068 0.04714045 #> [1] 1 1 1 a = set_quantities(1:5, m, 0.1) a %/% a #> Units: [1] #> Errors: 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 4.656613e-10 #> [1] 1 1 1 1 1 a %/% set_quantities(2) #> Units: [m] #> Errors: 0.55 0.05 0.55 0.05 0.55 #> [1] 0 1 2 2 2 set_quantities(1:5, m^2, 0.1) %/% set_quantities(2, m, 0.1) #> Units: [m] #> Errors: 0.55590170 0.07071068 0.59013878 0.11180340 0.63462912 #> [1] 0 1 2 2 2 a %% a #> Units: [m] #> Errors: 0.1414214 0.1414214 0.1414214 0.1414214 0.1414214 #> [1] 0 0 0 0 0 a %% set_quantities(2) #> Units: [m] #> Errors: 1.1045361 0.1414214 1.1045361 0.1414214 1.1045361 #> [1]  1  0 -1  0  1 c(min(x), max(x)) #> Units: [m/s] #> [1] 0.9 3.1 range(x) #> Units: [m/s] #> [1] 0.9 3.1 sum(x) #> 6.0(2) [m/s]"},{"path":"/reference/parse_quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Units and Errors — parse_quantities","title":"Parse Units and Errors — parse_quantities","text":"Functions parse character vectors quantities.","code":""},{"path":"/reference/parse_quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Units and Errors — parse_quantities","text":"","code":"parse_quantities(x, decimal_mark)  parse_units(x, decimal_mark)  parse_errors(x, decimal_mark)"},{"path":"/reference/parse_quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Units and Errors — parse_quantities","text":"x character vector parse. decimal_mark dot (.) provided.","code":""},{"path":"/reference/parse_quantities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Units and Errors — parse_quantities","text":"quantities, units errors object respectively.","code":""},{"path":"/reference/parse_quantities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse Units and Errors — parse_quantities","text":"parse_*() function returns object corresponding type, matter found. means , parse_units, errors found, dropped warning. Similarly parse_errors, units found, dropped warning. hand, parse_quantities always returns valid quantities object, even errors units found (, zero error dimensionless units applied).","code":""},{"path":"/reference/parse_quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Units and Errors — parse_quantities","text":"","code":"parse_quantities(\"(1.6021766208 +/- .0000000098) e-19 C\") #> 1.60217662(1)e-19 [C] parse_quantities(\"1.6021766208(98) e-19 C\") #> 1.60217662(1)e-19 [C] parse_units(\"1.6021766208 e-19 C\") #> 1.602177e-19 [C] parse_errors(\"1.6021766208(98) e-19\") #> 1.60217662(1)e-19  # quantities are converted to the first unit parse_quantities(c(\"12.34(2) m/s\", \"36.5(1) km/h\")) #> Units: [m/s] #> Errors: 0.02000000 0.02777778 #> [1] 12.34000 10.13889  # or kept as a list of mixed units parse_quantities(c(\"1.02(5) g\", \"2.51(0.01) V\", \"(3.23 +/- 0.12) m\")) #> Mixed units: V (1), g (1), m (1)  #> 1.02(5) [g], 2.51(1) [V], 3.2(1) [m]"},{"path":"/reference/quantities-package.html","id":null,"dir":"Reference","previous_headings":"","what":"quantities: Quantity Calculus for R Vectors — quantities-package","title":"quantities: Quantity Calculus for R Vectors — quantities-package","text":"Support painless automatic units uncertainty propagation numerical operations. units errors integrated complete quantity calculus system within R language. R vectors, matrices arrays automatically propagate attributes operate quantities objects.","code":""},{"path":"/reference/quantities-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"quantities: Quantity Calculus for R Vectors — quantities-package","text":"Edzer Pebesma, Thomas Mailund James Hiebert (2016). Measurement Units R. R Journal, 8(2), 486--494. doi:10.32614/RJ-2016-061 Iñaki Ucar, Edzer Pebesma Arturo Azcorra (2018). Measurement Errors R. R Journal, 10(2), 549--557. doi:10.32614/RJ-2018-075","code":""},{"path":"/reference/quantities-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"quantities: Quantity Calculus for R Vectors — quantities-package","text":"Iñaki Ucar","code":""},{"path":"/reference/quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Measurement Units and Uncertainty on a Numeric Vector — quantities","title":"Handle Measurement Units and Uncertainty on a Numeric Vector — quantities","text":"Set retrieve measurement units uncertainty /numeric vectors.","code":""},{"path":"/reference/quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Measurement Units and Uncertainty on a Numeric Vector — quantities","text":"","code":"quantities(x)  quantities(x) <- value  set_quantities(x, unit, errors = 0, ...,   mode = units_options(\"set_units_mode\"))"},{"path":"/reference/quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Measurement Units and Uncertainty on a Numeric Vector — quantities","text":"x numeric object, object class quantities, units errors. value list two components: object class units symbolic_units (see units), numeric vector length 1 length x (see errors). unit units object, something coercible one as_units (see set_units). errors numeric vector length 1 length x (see set_errors). ... passed methods. mode \"symbols\" (default), unit constructed expression supplied. Otherwise, ifmode = \"standard\", standard evaluation used supplied value argument can set via global option units_options(set_units_mode = \"standard\")","code":""},{"path":"/reference/quantities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle Measurement Units and Uncertainty on a Numeric Vector — quantities","text":"quantities returns named list units errors attributes. `quantities<-` sets units error values (converts x object class quantities). set_quantities pipe-friendly version `quantities<-` returns object class quantities.","code":""},{"path":[]},{"path":"/reference/quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle Measurement Units and Uncertainty on a Numeric Vector — quantities","text":"","code":"x = 1:3 class(x) #> [1] \"integer\" x #> [1] 1 2 3 quantities(x) <- list(\"m/s\", 0.1) class(x) #> [1] \"quantities\" \"units\"      \"errors\"     x #> Units: [m/s] #> Errors: 0.1 0.1 0.1 #> [1] 1 2 3  (x <- set_quantities(x, m/s, seq(0.1, 0.3, 0.1))) #> Units: [m/s] #> Errors: 0.1 0.2 0.3 #> [1] 1 2 3"},{"path":"/reference/rep.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Replicate Elements of Vectors and Lists — rep.quantities","title":"Replicate Elements of Vectors and Lists — rep.quantities","text":"S3 method quantities objects (see rep).","code":""},{"path":"/reference/rep.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replicate Elements of Vectors and Lists — rep.quantities","text":"","code":"# S3 method for quantities rep(x, ...)"},{"path":"/reference/rep.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replicate Elements of Vectors and Lists — rep.quantities","text":"x vector (mode including list) factor (    rep ) POSIXct POSIXlt Date     object; S4 object containing object. ... arguments passed methods.     internal default method can include: times integer-valued vector giving \t(non-negative) number times repeat element \tlength length(x), repeat whole vector \tlength 1.  Negative NA values error.  \tdouble vector accepted, inputs coerced \tinteger double vector. length.non-negative integer.  desired length         output vector.  inputs coerced double \tvector first element taken.  Ignored NA invalid. non-negative integer.  element x \trepeated times.  inputs coerced \tinteger double vector first element taken.  Treated \t1 NA invalid.","code":""},{"path":"/reference/rep.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replicate Elements of Vectors and Lists — rep.quantities","text":"","code":"rep(set_quantities(1, m/s, 0.1), 4) #> Units: [m/s] #> Errors: 0.1 0.1 0.1 0.1 #> [1] 1 1 1 1"},{"path":"/reference/t.quantities.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix Transpose — t.quantities","title":"Matrix Transpose — t.quantities","text":"S3 method quantities objects (see t).","code":""},{"path":"/reference/t.quantities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix Transpose — t.quantities","text":"","code":"# S3 method for quantities t(x)"},{"path":"/reference/t.quantities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix Transpose — t.quantities","text":"x matrix data frame, typically.","code":""},{"path":"/reference/t.quantities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix Transpose — t.quantities","text":"","code":"a <- matrix(1:30, 5, 6) quantities(a) <- list(\"m/s\", 1:30) t(a) #> Units: [m/s] #> Errors:  1  6 11 16 21 ... #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]    6    7    8    9   10 #> [3,]   11   12   13   14   15 #> [4,]   16   17   18   19   20 #> [5,]   21   22   23   24   25 #> [6,]   26   27   28   29   30"},{"path":"/reference/units.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Measurement Units on a Numeric Vector — units","title":"Handle Measurement Units on a Numeric Vector — units","text":"Set retrieve measurement units /numeric vectors convert units (extensions units package quantities errors objects).","code":""},{"path":"/reference/units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Measurement Units on a Numeric Vector — units","text":"","code":"# S3 method for quantities units(x) <- value  # S3 method for errors units(x) <- value  # S3 method for errors set_units(x, value, ...,   mode = units_options(\"set_units_mode\"))  # S3 method for quantities mixed_units(x, values, ...)  # S3 method for errors mixed_units(x, values, ...)"},{"path":"/reference/units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Measurement Units on a Numeric Vector — units","text":"x numeric object, object class quantities, units errors. value object class units symbolic_units, case set_units expression symbols (see examples). ... passed methods. mode \"symbols\" (default), unit constructed expression supplied. Otherwise, ifmode = \"standard\", standard evaluation used supplied value argument can set via global option units_options(set_units_mode = \"standard\") values character vector units encodings, list symbolic units class mixed_symbolic_units","code":""},{"path":"/reference/units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle Measurement Units on a Numeric Vector — units","text":"objects class quantities, methods `units<-`() set_units() automatically convert associated uncertainty new unit (see examples ).","code":""},{"path":[]},{"path":"/reference/units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle Measurement Units on a Numeric Vector — units","text":"","code":"(x <- set_quantities(1:5, m, 0.01)) #> Units: [m] #> Errors: 0.01 0.01 0.01 0.01 0.01 #> [1] 1 2 3 4 5 set_units(x, cm) #> Units: [cm] #> Errors: 1 1 1 1 1 #> [1] 100 200 300 400 500"},{"path":"/news/index.html","id":"quantities-020","dir":"Changelog","previous_headings":"","what":"quantities 0.2.0","title":"quantities 0.2.0","text":"Add compatibility errors::geom_errors (r-quantities/errors#52) units::scale_[x|y]_units (r-quantities/units#294) (#13). Fix warning .list.quantities. Add plotting examples introductory vignette. Add support errors units (#14). objects class quantities units, errors() method now returns units object matches units x. Methods errors<-() set_errors() assume provided uncertainty (value) units x (backwards compatibility). However, best practice provide value explicit units. way, uncertainty can provided different (compatible) units, automatically converted units x (see help(\"errors\", \"quantities\")). Add support correlations covariances units objects class quantities (part #14). Remove superfluous .quantities methods (part #14). Implement methods duplicated, anyDuplicated unique (#12).","code":""},{"path":"/news/index.html","id":"quantities-016","dir":"Changelog","previous_headings":"","what":"quantities 0.1.6","title":"quantities 0.1.6","text":"CRAN release: 2021-02-21 Fix compatibility units 0.7-0.","code":""},{"path":"/news/index.html","id":"quantities-015","dir":"Changelog","previous_headings":"","what":"quantities 0.1.5","title":"quantities 0.1.5","text":"CRAN release: 2020-06-14 Fix compatibility dplyr 1.0.0 (#8), coordinated units errors. Fix uncertainty propagation mixed scaling+offset unit conversion, Celsius Fahrenheit (#9).","code":""},{"path":"/news/index.html","id":"quantities-014","dir":"Changelog","previous_headings":"","what":"quantities 0.1.4","title":"quantities 0.1.4","text":"CRAN release: 2020-06-06 Add compatibility upcoming tibble v3.0.0 (r-quantities/units#225). Implement prettier str print (#5). Implement drop method data frames. Fix introduction vignette dplyr >= 1.0.0.","code":""},{"path":"/news/index.html","id":"quantities-013","dir":"Changelog","previous_headings":"","what":"quantities 0.1.3","title":"quantities 0.1.3","text":"CRAN release: 2019-10-31 Add CITATION units errors R Journal. Fix unit simplification arithmetical operations (#3).","code":""},{"path":"/news/index.html","id":"quantities-012","dir":"Changelog","previous_headings":"","what":"quantities 0.1.2","title":"quantities 0.1.2","text":"CRAN release: 2018-12-05 Add delayed S3 registration mechanism R >= 3.6.0 (a9bb97e).","code":""},{"path":"/news/index.html","id":"quantities-011","dir":"Changelog","previous_headings":"","what":"quantities 0.1.1","title":"quantities 0.1.1","text":"CRAN release: 2018-09-30 Initial CRAN release.","code":""}]
